import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database import get_db_connection, save_query_to_log, get_all_genres, get_all_years, get_top_frequent_queries
from config import FILM_DB_CONFIG, LOG_DB_CONFIG, TELEGRAM_BOT_TOKEN
import time
import requests.exceptions

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2)
    markup.add(KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"), KeyboardButton("üé≠ –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É"))
    markup.add(KeyboardButton("üìä –¢–æ–ø-10 –∑–∞–ø—Ä–æ—Å–æ–≤"), KeyboardButton("üëã –í—ã—Ö–æ–¥"))
    return markup

# –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å"
def start_button():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å", callback_data="start_menu"))
    return markup

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['start'])
def start(message):
    pinned_msg = bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ üé¨\n"
                                                   "–ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é:",
                                  reply_markup=start_button())
    try:
        bot.pin_chat_message(message.chat.id, pinned_msg.message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ "–ù–∞—á–∞—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "start_menu")
def show_main_menu(call):
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:", reply_markup=main_menu())

# –¢–æ–ø-10 —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
def send_top_queries(message):
    try:
        top_queries = get_top_frequent_queries()
        if top_queries:
            print("\n–¢–æ–ø-10 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:")
            for i, (query, count) in enumerate(top_queries, 1):
                print(f"{i}. '{query}' ‚Äì {count} —Ä–∞–∑(–∞).")
        else:
            print("\n–ó–∞–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        if top_queries:
            response = "üìä –¢–æ–ø-10 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
            for i, (query, count) in enumerate(top_queries, 1):
                response += f"{i}. {query} ‚Äì {count} —Ä–∞–∑(–∞)\n"
        else:
            response = "‚ùå –ó–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."

        send_message_in_chunks(message.chat.id, response)
        bot.send_message(message.chat.id, "–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø-10 –∑–∞–ø—Ä–æ—Å–æ–≤.")
        print(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda message: True)
def handle_buttons(message):
    if message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é":
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞:")
        bot.register_next_step_handler(message, search_by_title)
    elif message.text == "üé≠ –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É":
        choose_genre(message)
    elif message.text == "üìä –¢–æ–ø-10 –∑–∞–ø—Ä–æ—Å–æ–≤":
        send_top_queries(message)
    elif message.text == "üëã –í—ã—Ö–æ–¥":
        bot.send_message(message.chat.id, "üëã –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É. –î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã",
                         reply_markup=telebot.types.ReplyKeyboardRemove())
    else:
        bot.send_message(message.chat.id, "üëã –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏ –∏–∑ –º–µ–Ω—é.", reply_markup=main_menu())

# –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞
def search_by_title(message):
    try:
        keyword = message.text
        connection = get_db_connection(FILM_DB_CONFIG)
        cursor = connection.cursor()
        cursor.execute("SELECT title FROM film WHERE title LIKE %s", (f"%{keyword}%",))
        results = cursor.fetchall()
        cursor.close()
        connection.close()

        if results:
            response = "üé¨ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:\n" + "\n".join([f"- {row[0]}" for row in results])
        else:
            response = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        save_query_to_log(f"–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: {keyword}")
        send_message_in_chunks(message.chat.id, response)

    except Exception as e:
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")

    bot.send_message(message.chat.id, "–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

# –í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞
def choose_genre(message):
    genres = get_all_genres()
    if not genres:
        bot.send_message(message.chat.id, "‚ùå –ñ–∞–Ω—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for genre in genres:
        markup.add(KeyboardButton(genre))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, choose_year)

# –í—ã–±–æ—Ä –≥–æ–¥–∞
def choose_year(message):
    genre = message.text
    years = sorted(get_all_years(), reverse=True)[:35]

    if not years:
        bot.send_message(message.chat.id, "‚ùå –ì–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.")
        return

    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for year in years:
        markup.add(KeyboardButton(str(year)))

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, lambda msg: search_by_genre_and_year(msg, genre))

# –ü–æ–∏—Å–∫ –ø–æ –∂–∞–Ω—Ä—É –∏ –≥–æ–¥—É
def search_by_genre_and_year(message, genre):
    try:
        year = int(message.text)
        connection = get_db_connection(FILM_DB_CONFIG)
        cursor = connection.cursor()
        cursor.execute("""
            SELECT f.title FROM film f
            JOIN film_category fc ON f.film_id = fc.film_id
            JOIN category c ON fc.category_id = c.category_id
            WHERE c.name LIKE %s AND f.release_year = %s
        """, (f"%{genre}%", year))
        results = cursor.fetchall()
        cursor.close()
        connection.close()

        if results:
            response = f"üé≠ –§–∏–ª—å–º—ã –≤ –∂–∞–Ω—Ä–µ '{genre}' –∑–∞ {year} –≥–æ–¥:\n" + "\n".join([f"- {row[0]}" for row in results])
        else:
            response = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

        save_query_to_log(f"–ñ–∞–Ω—Ä: {genre}, –ì–æ–¥: {year}")
        send_message_in_chunks(message.chat.id, response)

    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, lambda msg: search_by_genre_and_year(msg, genre))

    bot.send_message(message.chat.id, "–ß—Ç–æ –µ—â–µ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message_in_chunks(chat_id, message):
    max_length = 4000
    while len(message) > max_length:
        bot.send_message(chat_id, message[:max_length])
        message = message[max_length:]
    if message:
        bot.send_message(chat_id, message)

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–∞—Ç–±–æ—Ç–∞ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
while True:
    try:
        bot.polling(none_stop=True, timeout=60)
    except requests.exceptions.ReadTimeout:
        print("‚ö†Ô∏è Telegram API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...")
        time.sleep(5)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        time.sleep(5)